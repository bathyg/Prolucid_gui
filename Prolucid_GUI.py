#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade not found on Wed Nov 29 23:37:04 2017
#

import wx
import json

# begin wxGlade: dependencies
import gettext

# end wxGlade

# begin wxGlade: extracode
# end wxGlade
default_params_dict = {'java_path':'', 'fasta_path':'', 'precursor_ppm': '50', 'num_isotope': '3', 'min_mass': '600',
                       'max_mass': '6000', 'protease': 'trypsin', 'cleave_residue': 'KR',
                       'enzyme_spec': 2, 'max_miss_cleave': '2', 'stat_mod': '57.02146 C',
                       'diff_mod': 0, 'c_term_stat_mod': '', 'n_term_stat_mod': '',
                       'DTA_min_num_peptide': '2', 'DTA_min_num_tryptic_end': 2, 'FDR_level': 0,
                       'FDR_filter': '0.05'}    #FDR_level 0 protein, 1 peptide, 2 spectrum


class ProLuCID_GUI(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ProLuCID_GUI.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.text_fasta = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_fasta_path = wx.Button(self, wx.ID_ANY, _("..."))
        self.Bind(wx.EVT_BUTTON, self.onOpenFasta, self.button_fasta_path)
        self.text_java = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_java_path = wx.Button(self, wx.ID_ANY, _("..."))
        self.Bind(wx.EVT_BUTTON, self.onOpenJava, self.button_java_path)
        self.text_ms2s = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_ms2_path = wx.Button(self, wx.ID_ANY, _("..."))
        self.Bind(wx.EVT_BUTTON, self.onOpenMS2, self.button_ms2_path)
        self.text_precursor_ppm = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['precursor_ppm']))
        self.text_num_isotope = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['num_isotope']))
        self.text_min_mass = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['min_mass']))
        self.text_max_mass = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['max_mass']))
        self.text_protease = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['protease']))
        self.text_cleave_residue = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['cleave_residue']))
        self.combo_box_enzyme_specificity = wx.ComboBox(self, wx.ID_ANY, choices=[_("0: non specificity"), _("1: specific at one end"), _("2: specific at both ends")],
                                                        style=wx.CB_DROPDOWN)
        self.text_max_miss_cleave = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['max_miss_cleave']))
        self.text_stat_mod = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['stat_mod']))
        self.combo_box_diff_mod = wx.ComboBox(self, wx.ID_ANY, choices=["", _("79.966331 STY"), _("15.994915 M"), _("0.984016 NQ"), _("57.021464 C"), _("42.010565 K")],
                                              style=wx.CB_DROPDOWN)
        self.text_c_term_stat_mod = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['c_term_stat_mod']))
        self.text_n_term_stat_mod = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['n_term_stat_mod']))
        self.text_DTA_min_num_peptide = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['DTA_min_num_peptide']))
        self.combo_box_DTA_ends = wx.ComboBox(self, wx.ID_ANY, choices=[_("0: allow non-tryptic"), _("1: one end"), _("2: both ends")], style=wx.CB_DROPDOWN)
        self.radio_box_FDR_level = wx.RadioBox(self, wx.ID_ANY, "", choices=[_("Protein level FDR"), _("Peptide level FDR"), _("Spectrum level FDR")], majorDimension=1,
                                               style=wx.RA_SPECIFY_ROWS)
        self.text_FDR_filter = wx.TextCtrl(self, wx.ID_ANY, _(default_params_dict['FDR_filter']))
        self.button_save = wx.Button(self, wx.ID_ANY, _("Save parameters ..."))
        self.Bind(wx.EVT_BUTTON, self.SaveParams, self.button_save)
        self.button_load = wx.Button(self, wx.ID_ANY, _("Load parameters ..."))
        self.text_ctrl_21 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_save_path = wx.Button(self, wx.ID_ANY, _("..."))
        self.button_run_prolucid = wx.Button(self, wx.ID_ANY, _("Run ProLuCID and DTASelect"))
        self.button_rerun_dta = wx.Button(self, wx.ID_ANY, _("Re-run DTASelect only"))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ProLuCID_GUI.__set_properties
        self.SetTitle(_("ProLuCID GUI by Yu (Tom) Gao @ Yates Laboratory"))
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_MENU))
        self.combo_box_enzyme_specificity.SetSelection(default_params_dict['enzyme_spec'])
        self.combo_box_diff_mod.SetSelection(default_params_dict['diff_mod'])
        self.combo_box_DTA_ends.SetSelection(default_params_dict['DTA_min_num_tryptic_end'])
        self.radio_box_FDR_level.SetSelection(default_params_dict['FDR_level'])
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ProLuCID_GUI.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, _("FASTA file:"), style=wx.ALIGN_RIGHT)
        sizer_2.Add(label_1, 1, wx.ALIGN_CENTER, 0)
        sizer_2.Add(self.text_fasta, 5, wx.ALIGN_CENTER, 0)
        sizer_2.Add(self.button_fasta_path, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, _("Java path:"), style=wx.ALIGN_RIGHT)
        sizer_3.Add(label_2, 1, wx.ALIGN_CENTER, 0)
        sizer_3.Add(self.text_java, 5, wx.ALIGN_CENTER, 0)
        sizer_3.Add(self.button_java_path, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        label_3 = wx.StaticText(self, wx.ID_ANY, _("MS2 file path:"), style=wx.ALIGN_RIGHT)
        sizer_4.Add(label_3, 1, wx.ALIGN_CENTER, 0)
        sizer_4.Add(self.text_ms2s, 5, wx.ALIGN_CENTER, 0)
        sizer_4.Add(self.button_ms2_path, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, _("Precursor tolerance (ppm):"), style=wx.ALIGN_CENTER)
        sizer_5.Add(label_4, 1, wx.ALIGN_CENTER, 0)
        sizer_5.Add(self.text_precursor_ppm, 1, wx.ALIGN_CENTER, 0)
        label_5 = wx.StaticText(self, wx.ID_ANY, _("Number of isotopes:"), style=wx.ALIGN_CENTER)
        sizer_5.Add(label_5, 1, wx.ALIGN_CENTER, 0)
        sizer_5.Add(self.text_num_isotope, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        label_6 = wx.StaticText(self, wx.ID_ANY, _("Precursor starts (Da):"), style=wx.ALIGN_CENTER)
        sizer_6.Add(label_6, 1, wx.ALIGN_CENTER, 0)
        sizer_6.Add(self.text_min_mass, 1, wx.ALIGN_CENTER, 0)
        label_7 = wx.StaticText(self, wx.ID_ANY, _("Precursor ends (Da):"), style=wx.ALIGN_CENTER)
        sizer_6.Add(label_7, 1, wx.ALIGN_CENTER, 0)
        sizer_6.Add(self.text_max_mass, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_6, 1, wx.EXPAND, 0)
        label_8 = wx.StaticText(self, wx.ID_ANY, _("Protease name:"), style=wx.ALIGN_CENTER)
        sizer_7.Add(label_8, 1, wx.ALIGN_CENTER, 0)
        sizer_7.Add(self.text_protease, 1, wx.ALIGN_CENTER, 0)
        label_9 = wx.StaticText(self, wx.ID_ANY, _("Cleavage residues:"), style=wx.ALIGN_CENTER)
        sizer_7.Add(label_9, 1, wx.ALIGN_CENTER, 0)
        sizer_7.Add(self.text_cleave_residue, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_7, 1, wx.EXPAND, 0)
        label_10 = wx.StaticText(self, wx.ID_ANY, _("Enzyme specificity:"), style=wx.ALIGN_CENTER)
        sizer_8.Add(label_10, 1, wx.ALIGN_CENTER, 0)
        sizer_8.Add(self.combo_box_enzyme_specificity, 1, wx.ALIGN_CENTER, 0)
        label_11 = wx.StaticText(self, wx.ID_ANY, _("Maximum missed cleavage:"), style=wx.ALIGN_CENTER)
        sizer_8.Add(label_11, 1, wx.ALIGN_CENTER, 0)
        sizer_8.Add(self.text_max_miss_cleave, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_8, 1, wx.EXPAND, 0)
        label_12 = wx.StaticText(self, wx.ID_ANY, _("Static modification:"), style=wx.ALIGN_CENTER)
        sizer_9.Add(label_12, 1, wx.ALIGN_CENTER, 0)
        sizer_9.Add(self.text_stat_mod, 1, wx.ALIGN_CENTER, 0)
        label_13 = wx.StaticText(self, wx.ID_ANY, _("Differential modification:"), style=wx.ALIGN_CENTER)
        sizer_9.Add(label_13, 1, wx.ALIGN_CENTER, 0)
        sizer_9.Add(self.combo_box_diff_mod, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_9, 1, wx.EXPAND, 0)
        label_16 = wx.StaticText(self, wx.ID_ANY, _("C-term static mod:"), style=wx.ALIGN_CENTER)
        sizer_13.Add(label_16, 1, wx.ALIGN_CENTER, 0)
        sizer_13.Add(self.text_c_term_stat_mod, 1, wx.ALIGN_CENTER, 0)
        label_17 = wx.StaticText(self, wx.ID_ANY, _("N-term static mod:"), style=wx.ALIGN_CENTER)
        sizer_13.Add(label_17, 1, wx.ALIGN_CENTER, 0)
        sizer_13.Add(self.text_n_term_stat_mod, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_13, 1, wx.EXPAND, 0)
        label_14 = wx.StaticText(self, wx.ID_ANY, _("Min # of peptide/protein:"), style=wx.ALIGN_CENTER)
        sizer_11.Add(label_14, 1, wx.ALIGN_CENTER, 0)
        sizer_11.Add(self.text_DTA_min_num_peptide, 1, wx.ALIGN_CENTER, 0)
        label_15 = wx.StaticText(self, wx.ID_ANY, _("Min # of tryptic end:"), style=wx.ALIGN_CENTER)
        sizer_11.Add(label_15, 1, wx.ALIGN_CENTER, 0)
        sizer_11.Add(self.combo_box_DTA_ends, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_12.Add(self.radio_box_FDR_level, 3, wx.ALIGN_CENTER, 0)
        sizer_12.Add(self.text_FDR_filter, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_14.Add(self.button_save, 1, wx.ALIGN_CENTER, 0)
        sizer_14.Add(self.button_load, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_14, 1, wx.EXPAND, 0)
        label_18 = wx.StaticText(self, wx.ID_ANY, _("Result file output folder:"), style=wx.ALIGN_CENTER)
        sizer_15.Add(label_18, 1, wx.ALIGN_CENTER, 0)
        sizer_15.Add(self.text_ctrl_21, 3, wx.ALIGN_CENTER, 0)
        sizer_15.Add(self.button_save_path, 0, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_16.Add(self.button_run_prolucid, 1, wx.ALIGN_CENTER, 0)
        sizer_16.Add(self.button_rerun_dta, 1, wx.ALIGN_CENTER, 0)
        sizer_1.Add(sizer_16, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def onOpenFasta(self, event):
        """"""
        with wx.FileDialog(
                self, message="Choose a file",
                defaultFile="",
                wildcard="Fasta file (*.fasta;*.FASTA)|*.fasta;*.FASTA|" \
                         "All files (*.*)|*.*",
                style=wx.FD_OPEN | wx.FD_DEFAULT_STYLE | wx.FD_CHANGE_DIR
        ) as dlg:
            # self.list_ctrl_3.DeleteAllItems()
            if dlg.ShowModal() == wx.ID_CANCEL:
                return

            paths = dlg.GetPaths()
            for index, path in enumerate(paths):
                self.text_fasta.SetValue(path)

    def onOpenJava(self, event):
        """"""
        with wx.FileDialog(
                self, message="Choose a file",
                defaultFile="",
                wildcard="Java.exe (java.exe;JAVA.EXE)|java.exe;JAVA.EXE|" \
                         "All files (*.*)|*.*",
                style=wx.FD_OPEN | wx.FD_DEFAULT_STYLE | wx.FD_CHANGE_DIR
        ) as dlg:
            # self.list_ctrl_3.DeleteAllItems()
            if dlg.ShowModal() == wx.ID_CANCEL:
                return

            paths = dlg.GetPaths()
            for index, path in enumerate(paths):
                self.text_java.SetValue(path)

    def onOpenMS2(self, event):
        """"""
        with wx.FileDialog(
                self, message="Choose a file",
                defaultFile="",
                wildcard="ms2 files (*.ms2;*.MS2)|*.ms2;*.MS2|" \
                         "All files (*.*)|*.*",
                style=wx.FD_OPEN | wx.FD_MULTIPLE | wx.FD_CHANGE_DIR
        ) as dlg:
            # self.list_ctrl_3.DeleteAllItems()
            if dlg.ShowModal() == wx.ID_CANCEL:
                return

            paths = dlg.GetPaths()
            temp_path_list = []
            for index, path in enumerate(paths):
                temp_path_list.append(path)
            self.text_ms2s.SetValue(';'.join(temp_path_list))

    def SaveParams(self, event):
        with wx.FileDialog(
                self, message="Choose a file",
                defaultFile="",
                wildcard="Params file (*.prolucid_params)|*.prolucid_params|" \
                         "All files (*.*)|*.*",
                style=wx.FD_SAVE | wx.FD_CHANGE_DIR
        ) as dlg:
            if dlg.ShowModal() == wx.ID_CANCEL:
                return
            paths = dlg.GetPaths()

        params_dict={}
        params_dict['java_path']=self.text_java.GetValue()
        params_dict['fasta_path']=self.text_fasta.GetValue()
        params_dict['precursor_ppm']=self.text_precursor_ppm.GetValue()
        params_dict['num_isotope']=self.text_num_isotope.GetValue()
        params_dict['min_mass'] = self.text_min_mass.GetValue()
        params_dict['max_mass'] = self.text_max_mass.GetValue()
        params_dict['protease'] = self.text_protease.GetValue()
        params_dict['cleave_residue'] = self.text_cleave_residue.GetValue()
        params_dict['enzyme_spec'] = self.combo_box_enzyme_specificity.GetSelection()
        params_dict['max_miss_cleave'] = self.text_max_miss_cleave.GetValue()
        params_dict['stat_mod'] = self.text_stat_mod.GetValue()
        params_dict['diff_mod'] = self.combo_box_diff_mod.GetSelection()
        params_dict['c_term_stat_mod'] = self.text_c_term_stat_mod.GetValue()
        params_dict['n_term_stat_mod'] = self.text_n_term_stat_mod.GetValue()
        params_dict['DTA_min_num_peptide'] = self.text_DTA_min_num_peptide.GetValue()
        params_dict['DTA_min_num_tryptic_end'] = self.combo_box_DTA_ends.GetSelection()
        params_dict['FDR_level'] = self.radio_box_FDR_level.GetSelection()
        params_dict['FDR_filter'] = self.text_FDR_filter.GetValue()

        print params_dict

        with open(paths[0],'wb') as file_out:
            file_out.write(json.dumps(params_dict))


# end of class ProLuCID_GUI


if __name__ == "__main__":
    gettext.install("app")  # replace with the appropriate catalog name

    app = wx.App(False)
    frame_1 = ProLuCID_GUI(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
